TASK:
- For the data described by the json schema found below (MY SCHEMA), build a Mongo Aggregation pipeline using as example
the query examples provided (EXAMPLE QUERIES that are setup against EXAMPLE SCHEMA - adjust for MY SCHEMA), the QUERY
SETUP HINTS/GUIDE and MY QUERY DESCRIPTION

=======================================================================================================================

MY QUERY DESCRIPTION:
- Encryption type: Store
- Variables: None
- Desired outcome: For each user, get the number of responses they gave, and return the count of responses and years
they spent in web3. Get the top 5 by number of responses.

MY SCHEMA:
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Web3 Experience Survey",
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string",
        "format": "uuid",
        "coerce": true
      },
      "years_in_web3": {
        "type": "object",
        "properties": {
          "%share": {
            "type": "string"
          }
        },
        "required": ["%share"]
      },
      "responses": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "rating": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            },
            "question_number": {
              "type": "integer",
              "minimum": 1
            }
          },
          "required": ["rating", "question_number"]
        },
        "minItems": 1
      }
    },
    "required": ["_id", "years_in_web3", "responses"]
  }
}

=======================================================================================================================

EXAMPLE SCHEMA FOR THE EXAMPLE QUERIES:
{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "Web3 Experience Survey",
  "type": "array",
  "items": {
    "type": "object",
    "properties": {
      "_id": {
        "type": "string",
        "format": "uuid",
        "coerce": true
      },
      "years_in_web3": {
        "type": "object",
        "properties": {
          "%share": {
            "type": "string"
          }
        },
        "required": ["%share"]
      },
      "responses": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "rating": {
              "type": "integer",
              "minimum": 1,
              "maximum": 5
            },
            "question_number": {
              "type": "integer",
              "minimum": 1
            }
          },
          "required": ["rating", "question_number"]
        },
        "minItems": 1
      }
    },
    "required": ["_id", "years_in_web3", "responses"]
  }
}

EXAMPLE QUERIES:
> Example for store encryption and no variables
{
    "variables": {},
    "pipeline":
        [
          {
            "$unwind": "$responses"
          },
          {
            "$group": {
              "_id": "$_id",
              "avg_rating": { "$avg": "$responses.rating" },
              "years_in_web3": { "$first": "$years_in_web3" }
            }
          },
          {
            "$sort": { "avg_rating": -1 }
          },
          {
            "$limit": 3
          },
          {
            "$project": {
              "_id": 1,
              "years_in_web3": {
                "%share": "$years_in_web3.%share"
              },
              "avg_rating": 1
            }
          }
        ]
    }

> Example with sum encryption and variables
{
    "variables": {
        "question_number": {
            "type": "number",
            "description": "The target question"
        }
    },
    "pipeline":
        [
          {
            "$match": {
              "responses.question_number": "##question_number"
            }
          },
          {
            "$group": {
              "_id": null,
              "total_years": { "$sum": "$years_in_web3.%share" },
              "count": { "$sum": 1 }
            }
          },
          {
            "$project": {
              "_id": 0,
              "sum_years_in_web3": {
                "%share": {
                  "$mod": [
                    "$total_years",
                    { "$add": [{ "$pow": [2, 32] }, 15] }
                  ]
                }
              },
              "user_count": "$count"
            }
          }
        ]
    }

QUERY SETUP HINTS/GUIDE:
- consider these working example
- any field in the schema that has %share under it, is encrypted and should be handled as in the examples depending if
we're using store encryption or sum encryption (note the mod operation in the sum example, it has to be exactly that
for sum encryption)
- consider the format of the output regarding fields with %share, it should be nested like in the examples
- if variables are mentioned, populate the variables field in the query like in the example with variables, and use the
variable fields inside the pipeline prefixed with ## like in the example with variables